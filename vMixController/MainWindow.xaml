<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:ignore="http://www.galasoft.ch/ignore"
        xmlns:cls="clr-namespace:vMixController.Classes"
        xmlns:c="clr-namespace:vMixController.Converters"
        xmlns:ctrls="clr-namespace:vMixController.Controls"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:props="clr-namespace:vMixController.Properties"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
        xmlns:e="clr-namespace:vMixController.Extensions"
        xmlns:toolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
        x:Class="vMixController.MainWindow"
        
        mc:Ignorable="d ignore"
        x:Name="Window"
        
        Left="{Binding WindowSettings.Left, Mode=TwoWay}"
        Top="{Binding WindowSettings.Top, Mode=TwoWay}"
        Width="{Binding WindowSettings.Width, Mode=TwoWay}"
        Height="{Binding WindowSettings.Height, Mode=TwoWay}"
        WindowState="{Binding WindowSettings.State, Mode=TwoWay}"
        Title="{Binding Title}"
        ResizeMode="CanResizeWithGrip"
        >
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/vMixControllerSkin;component/MainSkin.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <c:StatusToColorConverter x:Key="StatusToColorConverter"/>
            <c:StringToCursor x:Key="StringToCursor"/>
            <c:IntegerToBooleanConverter x:Key="IntegerToBooleanConverter"/>
            <c:MarginMultiConverter x:Key="MarginMultiConverter"/>
            <c:NotConverter x:Key="NotConverter"/>
            <c:BoolToBrushConverter x:Key="BoolToBrush"/>
            <c:ControlToPointConverter x:Key="ControlToPoint"/>
            <Rect x:Key="IconViewbox">0.18,0.18,0.64,0.64</Rect>
            <CompositeCollection x:Key="SubMenu" x:Shared="False">
                <MenuItem Icon="{x:Null}" ItemsSource="{x:Null}" Header="{e:Localize Add Widget}" Command="{Binding Main.CreateWidgetFromTemplateCommand, Source={StaticResource Locator}}" CommandParameter="{Binding}"/>
                <Separator/>
                <MenuItem Icon="{x:Null}" ItemsSource="{x:Null}" Header="{e:Localize Edit Template}" Command="{Binding Main.EditWidgetTemplateCommand, Source={StaticResource Locator}}" CommandParameter="{Binding}"/>
                <MenuItem Icon="{x:Null}" ItemsSource="{x:Null}" Header="{e:Localize Remove Template}" Command="{Binding Main.RemoveWidgetTemplateCommand, Source={StaticResource Locator}}" CommandParameter="{Binding}"/>
            </CompositeCollection>
            <Rectangle x:Key="DynamicIcon" x:Shared="False"  Width="16" Height="16" StrokeThickness="1">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding B.Color, FallbackValue=Black}"/>
                </Rectangle.Fill>
                <Rectangle.Stroke>
                    <SolidColorBrush Color="{Binding B.BorderColor, FallbackValue=Black}"/>
                </Rectangle.Stroke>
            </Rectangle>
            <CompositeCollection x:Key="CreateItems" x:Shared="False">
                <MenuItem x:Name="Button" Command="{Binding CreateWidgetCommand}" CommandParameter="Button" Header="{e:Localize Button}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#Material Design Icons">&#xF131;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem x:Name="Label" Command="{Binding CreateWidgetCommand}" CommandParameter="Label" Header="{e:Localize Label}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF02B;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem x:Name="Region" Command="{Binding CreateWidgetCommand}" CommandParameter="Region" Header="{e:Localize Region}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF2D0;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <!--<MenuItem Command="{Binding CreateWidgetCommand}" CommandParameter="Image" Header="Image"/>-->
                <MenuItem x:Name="List" Command="{Binding CreateWidgetCommand}" CommandParameter="List" Header="{e:Localize List}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF03A;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem x:Name="Score" Command="{Binding CreateWidgetCommand}" CommandParameter="Score" Header="{e:Localize Score}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF005;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem x:Name="Slider" Command="{Binding CreateWidgetCommand}" CommandParameter="Slider" Header="{e:Localize Slider}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF1DE;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem x:Name="TextField" Command="{Binding CreateWidgetCommand}" CommandParameter="TextField" Header="{e:Localize Text Field}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#Material Design Icons">&#xF60E;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem x:Name="Timer" Command="{Binding CreateWidgetCommand}" CommandParameter="Timer" Header="{e:Localize Timer}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#Material Design Icons">&#xF51B;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <!--<MenuItem x:Name="Timecode" Command="{Binding CreateWidgetCommand}" CommandParameter="Timecode" Header="{e:Localize Timecode}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#Material Design Icons">&#xF150;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>-->
                <MenuItem x:Name="Clock" Command="{Binding CreateWidgetCommand}" CommandParameter="Clock" Header="{e:Localize Clock}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#Material Design Icons">&#xF150;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem x:Name="Container" Command="{Binding CreateWidgetCommand}" CommandParameter="Container" Header="{e:Localize Container}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF1B2;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem x:Name="ExternalData" Command="{Binding CreateWidgetCommand}" ItemsSource="{Binding ExternalDataProviders}" CommandParameter="ExternalData" Header="{e:Localize External Data}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF1C0;</TextBlock>
                    </MenuItem.Icon>
                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding A}"/>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                    <MenuItem.Resources>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="Command" Value="{Binding Main.CreateWidgetFromTemplateCommand, Source={StaticResource Locator}}"/>
                            <Setter Property="CommandParameter" Value="{Binding}"/>
                            <Setter Property="HorizontalContentAlignment" Value="Left"/>
                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                            <Setter Property="Icon" Value="{StaticResource DynamicIcon}"/>
                        </Style>
                    </MenuItem.Resources>
                </MenuItem>
                <MenuItem x:Name="MidiInterface" Command="{Binding CreateWidgetCommand}" CommandParameter="MidiInterface" Header="{e:Localize MIDI Device}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF0E7;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem x:Name="MultiState" Command="{Binding CreateWidgetCommand}" CommandParameter="MultiState" Header="{e:Localize Multi State}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF233;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem x:Name="Templates" Header="{e:Localize Templates}" ItemsSource="{Binding WidgetTemplates}" IsEnabled="{Binding Items.Count, Converter={StaticResource IntegerToBooleanConverter}, Mode=OneWay, RelativeSource={RelativeSource Self}}">

                    <MenuItem.ItemTemplate>
                        <DataTemplate>
                            <TextBlock><Run Text="["/><InlineUIContainer>
									<TextBlock FontStyle="Italic" Text="{Binding B.Type}"/>
								</InlineUIContainer><Run Text="] "/><InlineUIContainer>
									<TextBlock Text="{Binding A}"/>
								</InlineUIContainer></TextBlock>
                        </DataTemplate>
                    </MenuItem.ItemTemplate>
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="HorizontalContentAlignment" Value="Left"/>
                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                            <Setter Property="ItemsSource" Value="{StaticResource SubMenu}"/>
                            <Setter Property="Icon" Value="{StaticResource DynamicIcon}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
            </CompositeCollection>
        </ResourceDictionary>
    </Window.Resources>

    <Window.DataContext>
        <Binding Path="Main" Source="{StaticResource Locator}"/>
    </Window.DataContext>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="PreviewKeyUp">
            <cmd:EventToCommand Command="{Binding PreviewKeyUpCommand}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="PreviewMouseDown">
            <cmd:EventToCommand Command="{Binding PreviewMouseDown}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="PreviewMouseUp">
            <cmd:EventToCommand Command="{Binding PreviewMouseUp}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <cmd:EventToCommand Command="{Binding ClosingCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <i:Interaction.Behaviors>
        <e:HideCloseButtonOnWindow IsEnabled="{Binding WindowSettings.Locked, Converter={StaticResource NotConverter}}"/>
    </i:Interaction.Behaviors>
    <Grid x:Name="LayoutRoot">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Menu VerticalContentAlignment="Center" HorizontalContentAlignment="Left">
            <MenuItem Header="{e:Localize File}">
                <MenuItem Command="{Binding NewControllerCommand}" Header="{e:Localize New}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF016;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Command="{Binding LoadControllerCommand}" Header="{e:Localize Open}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF07C;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Command="{Binding SaveControllerCommand}"  Header="{e:Localize Save}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF0C7;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Command="{Binding GlobalVariablesCommand}" Header="{e:Localize Global Variables}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF02D;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Command="{Binding AboutCommand}" Header="{e:Localize About}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF05A;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
                <!--<MenuItem Command="{Binding ReportBugCommand}" Header="{e:Localize Report a bug}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF188;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>-->
                <Separator/>
                <MenuItem Command="{Binding ExitCommand}"  Header="{e:Localize Exit}">
                    <MenuItem.Icon>
                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xF08B;</TextBlock>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem IsEnabled="{Binding WindowSettings.Locked, Converter={StaticResource NotConverter}}" Header="{e:Localize Widget}" ItemsSource="{DynamicResource CreateItems}">
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="MenuItem">
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                    </Style>
                </MenuItem.ItemContainerStyle>

            </MenuItem>
            <MenuItem ToolTip="{e:Localize Click \= Lock widgets\, Shift+Click \= Lock with password}" Header="{Binding WindowSettings.Locked}" Command="{Binding ToggleLockCommand}">
                <MenuItem.HeaderTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock VerticalAlignment="Center" FontFamily="/vMixControllerSkin;Component/#Material Design Icons" x:Name="LockedIcon"></TextBlock>
                            <TextBlock Text="Lock"/>
                        </StackPanel>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding}" Value="True">
                                <Setter Property="Text" Value="&#xF33E;" TargetName="LockedIcon"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding}" Value="False">
                                <Setter Property="Text" Value="&#xF340;" TargetName="LockedIcon"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </MenuItem.HeaderTemplate>
            </MenuItem>
            <MenuItem ToolTip="{e:Localize Sync UTC to vMix state}" Header="{Binding Status}" Command="{Binding SyncStateCommand}">
                <MenuItem.HeaderTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Ellipse Width="8" Height="8" Margin="{StaticResource RightStdMargin}" Stroke="Black">
                                <Ellipse.Fill>
                                    <SolidColorBrush Color="{Binding Converter={StaticResource StatusToColorConverter}}"/>
                                </Ellipse.Fill>
                            </Ellipse>
                            <TextBlock Text="{e:Localize Sync}"></TextBlock>
                        </StackPanel>
                    </DataTemplate>
                </MenuItem.HeaderTemplate>
                <MenuItem.Style>
                    <Style TargetType="MenuItem">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Status}" Value="Sync">
                                <Setter Property="FontWeight" Value="Bold"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </MenuItem.Style>
            </MenuItem>
        </Menu>
        <ScrollViewer Tag="{Binding IsHotkeysEnabled, Converter={StaticResource NotConverter}}" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Grid.Row="1" IsManipulationEnabled="True" PreviewMouseWheel="ScrollViewer_PreviewMouseWheel">
            <Grid Tag="{Binding WindowSettings.Locked, Mode=TwoWay}">
                <ListView BorderThickness="0" ItemsSource="{Binding Widgets}" Background="Transparent">
                    <ListView.ContextMenu>
                        <ContextMenu x:Name="CreateContextMenu" VerticalContentAlignment="Center" HorizontalContentAlignment="Left" ItemsSource="{DynamicResource CreateItems}">
                            <ContextMenu.Resources>
                                <cls:BindingProxy x:Key="proxy" Data="{Binding}" />
                            </ContextMenu.Resources>
                            <ContextMenu.ItemContainerStyleSelector>
                                <cls:MenuStyleSelector>
                                    <cls:MenuStyleSelector.MenuItem>
                                        <Style TargetType="MenuItem">
                                            <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                            <Setter Property="IsEnabled" Value="{Binding WindowSettings.Locked, Converter={StaticResource NotConverter}}"/>
                                        </Style>
                                    </cls:MenuStyleSelector.MenuItem>
                                </cls:MenuStyleSelector>
                            </ContextMenu.ItemContainerStyleSelector>
                        </ContextMenu>
                    </ListView.ContextMenu>
                    <ListView.Resources>
                        <ResourceDictionary>
                            <ResourceDictionary.MergedDictionaries>
                                <ResourceDictionary Source="Skins/ControlTemplates.xaml"/>
                            </ResourceDictionary.MergedDictionaries>
                        </ResourceDictionary>
                    </ListView.Resources>

                    <ListView.Cursor>
                        <Binding Converter="{StaticResource StringToCursor}" Mode="OneWay" Path="EditorCursor"/>
                    </ListView.Cursor>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseLeftButtonUp">
                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding MouseButtonUp}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="ContextMenuOpening">
                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding ContextMenuOpening}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="ContextMenuClosing">
                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding ContextMenuClosing}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="MouseLeftButtonDown">
                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding MouseButtonDown}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="MouseMove">
                            <cmd:EventToCommand PassEventArgsToCommand="True" Command="{Binding MouseMove}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <i:Interaction.Behaviors>
                        <e:IgnoreMouseWheelBehavior IgnoreBehavior="{Binding IsHotkeysEnabled, Converter={StaticResource NotConverter}}"/>
                    </i:Interaction.Behaviors>
                    <ListView.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Grid IsItemsHost="True" HorizontalAlignment="Left" VerticalAlignment="Top">
                                <Grid.LayoutTransform>
                                    <ScaleTransform ScaleX="{Binding Main.WindowSettings.UIScale, Source={StaticResource Locator}}" ScaleY="{Binding Main.WindowSettings.UIScale, Source={StaticResource Locator}}"/>
                                </Grid.LayoutTransform>
                            </Grid>
                        </ItemsPanelTemplate>
                    </ListView.ItemsPanel>
                    <ListView.ItemTemplateSelector>
                        <ctrls:TypeTemplateSelector/>
                    </ListView.ItemTemplateSelector>
                    <ListView.ItemContainerStyle>
                        <Style TargetType="{x:Type ListViewItem}">
                            <Setter Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource MarginMultiConverter}">
                                        <Binding Path="Left"/>
                                        <Binding Path="Top"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="HorizontalAlignment" Value="Left"/>
                            <Setter Property="VerticalAlignment" Value="Top"/>
                            <!--</Setter> Value="{Binding Left}"/>
                    <Setter Property="Canvas.Top" Value="{Binding Top}"/>-->
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                                        <ContentPresenter />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListView.ItemContainerStyle>
                </ListView>
                <!--<ItemsControl ItemsSource="{Binding ExecLinks}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Line X1="{Binding A, Converter={StaticResource ControlToPoint}, Mode=TwoWay}"
                                  Y1="{Binding A, Converter={StaticResource ControlToPoint}, ConverterParameter=1, Mode=TwoWay}"
                                  X2="{Binding B, Converter={StaticResource ControlToPoint}, Mode=TwoWay}"
                                  Y2="{Binding B, Converter={StaticResource ControlToPoint}, ConverterParameter=1, Mode=TwoWay}"
                                  Stroke="Red"
                                  StrokeThickness="2" StrokeStartLineCap="Triangle" StrokeEndLineCap="Square" StrokeDashArray="5 5"/>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>-->
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Background">
                            <Setter.Value>
                                <ImageBrush ImageSource="Grid.png" TileMode="Tile" ViewportUnits="Absolute" Viewport="0 0 8 8"/>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <!--<Trigger Property="Cursor" Value="Hand">
                                <Setter Property="BorderThickness" Value="2"/>
                                <Setter Property="BorderBrush" Value="Red"/>
                            </Trigger>-->
                            <Trigger Property="Tag">
                                <Trigger.Value>
                                    <sys:Boolean>True</sys:Boolean>
                                </Trigger.Value>
                                <Setter Property="Background" Value="#FF1E2328"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
            </Grid>
        </ScrollViewer>
        <Grid Grid.Row="1" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="{Binding SelectorPosition}" Width="{Binding SelectorWidth}" Height="{Binding SelectorHeight}" Visibility="{Binding SelectorEnabled, Converter={StaticResource BooleanToVisibilityConverter}}" IsHitTestVisible="False" Background="#7F00FFFF"/>
        <StatusBar Grid.Row="2">
            <StatusBarItem>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Margin="{StaticResource RightStdMargin}"><Run Text="IP"/></TextBlock>
                    <TextBox Style="{StaticResource WidgetTextBox}" IsEnabled="{Binding WindowSettings.Locked, Converter={StaticResource NotConverter}}" Width="128" Text="{Binding WindowSettings.IP, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" BorderBrush="{Binding IsUrlValid, Converter={StaticResource BoolToBrush}}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="GotFocus">
                                <cmd:EventToCommand PassEventArgsToCommand="true" Command="{Binding TextBoxGotFocus}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="LostFocus">
                                <cmd:EventToCommand PassEventArgsToCommand="true" Command="{Binding TextBoxLostFocus}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewKeyUp">
                                <cmd:EventToCommand PassEventArgsToCommand="true" Command="{Binding TextBoxPreviewKeyUp}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBox>
                </StackPanel>
            </StatusBarItem>
            <StatusBarItem>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Margin="{StaticResource RightStdMargin}"><Run Text="Port"/></TextBlock>
                    <TextBox Style="{StaticResource WidgetTextBox}" IsEnabled="{Binding WindowSettings.Locked, Converter={StaticResource NotConverter}}" Width="64" Text="{Binding WindowSettings.Port, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" BorderBrush="{Binding IsUrlValid, Converter={StaticResource BoolToBrush}}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="GotFocus">
                                <cmd:EventToCommand PassEventArgsToCommand="true" Command="{Binding TextBoxGotFocus}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="LostFocus">
                                <cmd:EventToCommand PassEventArgsToCommand="true" Command="{Binding TextBoxLostFocus}"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewKeyUp">
                                <cmd:EventToCommand PassEventArgsToCommand="true" Command="{Binding TextBoxPreviewKeyUp}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBox>
                </StackPanel>
            </StatusBarItem>
            <StatusBarItem>
                <StackPanel Orientation="Horizontal">
                    <Ellipse Width="16" Height="16" Margin="{StaticResource RightStdMargin}" Stroke="Black">
                        <Ellipse.Fill>
                            <SolidColorBrush Color="{Binding Status, Converter={StaticResource StatusToColorConverter}}"/>
                        </Ellipse.Fill>
                    </Ellipse>
                    <TextBlock Text="{Binding Status}"/>
                </StackPanel>
            </StatusBarItem>
            <Separator/>
            <StatusBarItem>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Margin="{StaticResource RightStdMargin}" Text="{e:Localize Scaling}"></TextBlock>
                    <Slider Width="128" Value="{Binding WindowSettings.UIScale, Mode=TwoWay}" Minimum="1" Maximum="5"/>
                    <TextBlock Margin="{StaticResource LeftStdMargin}" Text="{Binding WindowSettings.UIScale, StringFormat=0.00}"/>
                </StackPanel>
            </StatusBarItem>
            <Separator/>
            <!--<StatusBarItem  HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                <CheckBox IsChecked="{Binding LIVE, Mode=TwoWay}">LIVE</CheckBox>
            </StatusBarItem>-->
            <StatusBarItem  HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                <CheckBox IsChecked="{Binding LIVE, Mode=TwoWay}" FontWeight="Bold">LIVE
                    <CheckBox.Style>
                        <Style TargetType="CheckBox">
                            <Style.Setters>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="CheckBox">
                                            <Grid x:Name="back" Background="Red">
                                                <ContentPresenter Margin="2"/>
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsChecked" Value="True">
                                                    <Setter Property="Foreground" Value="White"/>
                                                </Trigger>
                                                <Trigger Property="IsChecked" Value="False">
                                                    <Setter Property="Background" Value="Yellow" TargetName="back"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style.Setters>
                        </Style>
                    </CheckBox.Style>
                </CheckBox>
            </StatusBarItem>

            <StatusBarItem  HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                <CheckBox IsChecked="{Binding WindowSettings.IsTopmost, Mode=TwoWay}">Is Topmost</CheckBox>
            </StatusBarItem>
            <StatusBarItem  HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                <CheckBox IsChecked="{Binding WindowSettings.EnableLog, Mode=TwoWay}">Enable Log</CheckBox>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                <StackPanel Orientation="Horizontal">
                    <CheckBox Margin="0,0,8,0" IsChecked="{Binding IsGhosted, Mode=TwoWay}" ToolTip="Make top layer transparent" IsEnabled="{Binding WindowSettings.Locked, Mode=OneWay, Converter={StaticResource NotConverter}}">
                        <CheckBox.Style>
                            <Style TargetType="CheckBox">
                                <Style.Setters>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="CheckBox">
                                                <Grid Background="Aqua">
                                                    <StackPanel Orientation="Horizontal">
                                                        <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome" VerticalAlignment="Center" x:Name="Icon"/>
                                                        <ContentPresenter VerticalAlignment="Center" Margin="2"/>
                                                    </StackPanel>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Foreground" Value="Gray"/>
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter Property="Text" Value="&#xf06e;" TargetName="Icon"/>
                                                        <Setter Property="Content" Value="Ghosted"/>
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="False">
                                                        <Setter Property="Text" Value="&#xf070;" TargetName="Icon"/>
                                                        <Setter Property="Content" Value="Visible"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style.Setters>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                    <!--<Button Margin="0,0,8,0" Command="{Binding RegisterNDIFilters}">Register Filters</Button>-->
                    <TextBlock>
                    <Hyperlink ToolTip="{e:Localize Support vMix Universal Title Controller!}" NavigateUri="https://www.gg.com/cgi-bin/webscr?cmd=_donations&amp;business=WT9QZ2XH97HMN&amp;lc=US&amp;item_name=vMix%20Universal%20Title%20Controller&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted" RequestNavigate="Hyperlink_RequestNavigate">
                        <Image Source="/vMixControllerSkin;component\btn_donate_SM.gif" Stretch="None" Cursor="Hand"/>
                    </Hyperlink>
                    </TextBlock>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
